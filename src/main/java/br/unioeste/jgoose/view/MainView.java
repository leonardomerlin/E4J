package br.unioeste.jgoose.view;

import br.unioeste.jgoose.IStarElements.IStarElement;
import br.unioeste.jgoose.IStarsLinks.IStarLink;
import br.unioeste.jgoose.controller.Controller;
import br.unioeste.jgoose.e4j.swing.Editor;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Diego Peliser
 */
public class MainView extends javax.swing.JFrame {

    public JButton mapearCasosdeUso = new JButton();
    private Editor e4jInstace = null;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
        setLocationRelativeTo(null);
        //Seta tema de swing igual ao tema do SO
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            System.out.println("Erro no LookAndFeel!");
        }
        mapearCasosdeUso = mapearCasosdeUsoButton;
        mapearCasosdeUso.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abasMenu = new javax.swing.JTabbedPane();
        informacoesArquivo = new javax.swing.JScrollPane();
        tabelaArquivo = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        atoresMapeados = new javax.swing.JScrollPane();
        tabelaAtores = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        elementosMapeados = new javax.swing.JScrollPane();
        tabelaElementos = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        linksMapeados = new javax.swing.JScrollPane();
        tabelaLinks = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        abrirArquivoTelosButton = new javax.swing.JButton();
        diretrizesButton = new javax.swing.JButton();
        mapearCasosdeUsoButton = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        arquivo = new javax.swing.JMenu();
        abrirArquivoTelosMenu = new javax.swing.JMenuItem();
        sairMenu = new javax.swing.JMenuItem();
        MenuFerramentas = new javax.swing.JMenu();
        AbrirEditor = new javax.swing.JMenuItem();
        ajuda = new javax.swing.JMenu();
        diretrizesMenu = new javax.swing.JMenuItem();
        sobreMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JGOOSE");
        setResizable(false);

        tabelaArquivo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Descrição"
            }
        ));
        informacoesArquivo.setViewportView(tabelaArquivo);
        tabelaArquivo.getColumnModel().getColumn(0).setHeaderValue("Descrição");
        tabelaArquivo.getColumnModel().getColumn(1).setHeaderValue("Descrição");

        abasMenu.addTab("Informações do Arquivo", informacoesArquivo);

        tabelaAtores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Código", "Nome", "Childrens"
            }
        ));
        atoresMapeados.setViewportView(tabelaAtores);
        tabelaAtores.getColumnModel().getColumn(0).setMaxWidth(35);
        tabelaAtores.getColumnModel().getColumn(1).setMaxWidth(100);
        tabelaAtores.getColumnModel().getColumn(3).setMaxWidth(70);

        abasMenu.addTab("Atores i* Mapeados", atoresMapeados);

        tabelaElementos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Código", "Nome", "Elemento Tipo"
            }
        ));
        elementosMapeados.setViewportView(tabelaElementos);
        tabelaElementos.getColumnModel().getColumn(0).setMaxWidth(35);
        tabelaElementos.getColumnModel().getColumn(1).setMaxWidth(100);

        abasMenu.addTab("Elementos i* Mapeados", elementosMapeados);

        tabelaLinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Código", "From", "To", "Link Tipo"
            }
        ));
        linksMapeados.setViewportView(tabelaLinks);
        tabelaLinks.getColumnModel().getColumn(0).setMaxWidth(50);

        abasMenu.addTab("Links i* Mapeados", linksMapeados);

        abrirArquivoTelosButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder_open_16x16.png"))); // NOI18N
        abrirArquivoTelosButton.setText("Abrir Arquivo Telos");
        abrirArquivoTelosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArquivoTelosButtonActionPerformed(evt);
            }
        });

        diretrizesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doc_16x16.png"))); // NOI18N
        diretrizesButton.setText("Diretrizes");
        diretrizesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diretrizesButtonActionPerformed(evt);
            }
        });

        mapearCasosdeUsoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/usecase_16x16.png"))); // NOI18N
        mapearCasosdeUsoButton.setText("Mapear Casos de Uso UML");
        mapearCasosdeUsoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapearCasosdeUsoButtonActionPerformed(evt);
            }
        });

        arquivo.setText("Arquivo");

        abrirArquivoTelosMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirArquivoTelosMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder_open_16x16.png"))); // NOI18N
        abrirArquivoTelosMenu.setText("Abrir");
        abrirArquivoTelosMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArquivoTelosMenuActionPerformed(evt);
            }
        });
        arquivo.add(abrirArquivoTelosMenu);

        sairMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        sairMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cross_16x16.png"))); // NOI18N
        sairMenu.setText("Sair");
        sairMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairMenuActionPerformed(evt);
            }
        });
        arquivo.add(sairMenu);

        barraMenu.add(arquivo);

        MenuFerramentas.setText("Ferramentas");

        AbrirEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        AbrirEditor.setText("Abrir Editor");
        AbrirEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirEditorActionPerformed(evt);
            }
        });
        MenuFerramentas.add(AbrirEditor);

        barraMenu.add(MenuFerramentas);

        ajuda.setText("Ajuda");

        diretrizesMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        diretrizesMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doc_16x16.png"))); // NOI18N
        diretrizesMenu.setText("Diretrizes");
        diretrizesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diretrizesMenuActionPerformed(evt);
            }
        });
        ajuda.add(diretrizesMenu);

        sobreMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/info_16x16.png"))); // NOI18N
        sobreMenu.setText("Sobre");
        sobreMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobreMenuActionPerformed(evt);
            }
        });
        ajuda.add(sobreMenu);

        barraMenu.add(ajuda);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abasMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(abrirArquivoTelosButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(diretrizesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mapearCasosdeUsoButton)
                .addGap(67, 67, 67))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {abrirArquivoTelosButton, diretrizesButton, mapearCasosdeUsoButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abrirArquivoTelosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diretrizesButton)
                    .addComponent(mapearCasosdeUsoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(abasMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {abrirArquivoTelosButton, diretrizesButton, mapearCasosdeUsoButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirArquivoTelosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArquivoTelosButtonActionPerformed
        Controller.abrirArquivoTelos(this);
    }//GEN-LAST:event_abrirArquivoTelosButtonActionPerformed

    private void sobreMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobreMenuActionPerformed
        SobreView sobre = new SobreView(this);
        this.setEnabled(false);
        sobre.setVisible(true);
    }//GEN-LAST:event_sobreMenuActionPerformed

    private void sairMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairMenuActionPerformed
        dispose();
    }//GEN-LAST:event_sairMenuActionPerformed

    private void abrirArquivoTelosMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArquivoTelosMenuActionPerformed
        Controller.abrirArquivoTelos(this);
    }//GEN-LAST:event_abrirArquivoTelosMenuActionPerformed

    private void diretrizesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diretrizesMenuActionPerformed
        this.showGuidelinesDialog();
    }//GEN-LAST:event_diretrizesMenuActionPerformed

    private void showGuidelinesDialog(){
        GuidelinesJDialog diretrizes;
        try {
            diretrizes = new GuidelinesJDialog(this);
            diretrizes.setModal(true);

            int x = this.getX() + (this.getWidth() - diretrizes.getWidth()) / 2;
            int y = this.getY() + (this.getHeight() - diretrizes.getHeight()) / 2;
            diretrizes.setLocation(x, y);
            
            diretrizes.setVisible(true);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void diretrizesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diretrizesButtonActionPerformed
        this.showGuidelinesDialog();
    }//GEN-LAST:event_diretrizesButtonActionPerformed

    private void mapearCasosdeUsoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapearCasosdeUsoButtonActionPerformed
        Controller.mapearCasosDeUso();
        CasosDeUsoView telacasosdeuso = new CasosDeUsoView(this);
        telacasosdeuso.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_mapearCasosdeUsoButtonActionPerformed

    private void AbrirEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirEditorActionPerformed
        //
        if (e4jInstace == null) {
            boolean isPartOfJGOOSE = true;
//            e4jInstace = new Editor();
            JFrame frame = e4jInstace.getFrame();
            WindowListenerImpl windowListener = new WindowListenerImpl(this, frame);
            this.addWindowListener(windowListener);
//            frame.addWindowListener(windowListener);
        }
        e4jInstace.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_AbrirEditorActionPerformed

    /*
     * Atualiza as Tabelas Informações do Arquivo, Atores i* Mapeados,
     * Elementos i* Mapeados e Links i* Mapeados
     */
    public void atualizaTabela() {
        /*
         * Atualiza Informações Arquivo
         */
        DefaultTableModel tabArquivo = new DefaultTableModel();
        String vetArquivo[] = new String[2];
        tabArquivo.addColumn("Descrição");
        tabArquivo.addColumn("Descrição");
        vetArquivo[0] = "Nome do Arquivo";
        vetArquivo[1] = Controller.getOme().getDirEntrada();
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Ator Sistema";
        int posAtor = Controller.getOme().procuraActorCod(Controller.getatorSistema());
        vetArquivo[1] = Controller.getOme().getActor(posAtor).getName();
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Código Ator Sistema";
        vetArquivo[1] = Controller.getatorSistema();
        tabArquivo.addRow(vetArquivo);
        int nlinks_mapeados = Controller.getOme().getDependencies().size() + Controller.getOme().getDecompositions().size() + Controller.getOme().getMeansEnds().size() + Controller.getOme().getISA().size();
        nlinks_mapeados += Controller.getOme().getINS().size() + Controller.getOme().getContribution().size() + Controller.getOme().getIsPartOf().size() + Controller.getOme().getOccupies().size() + Controller.getOme().getPlays().size() + Controller.getOme().getCovers().size();
        int nelementos_mapeados = Controller.getOme().getTasks().size() + Controller.getOme().getGoals().size() + Controller.getOme().getSoftgoals().size() + Controller.getOme().getResources().size();
        int natores_mapeados = Controller.getOme().getActors().size() + Controller.getOme().getAgents().size() + Controller.getOme().getRoles().size() + Controller.getOme().getPositions().size();
        vetArquivo[0] = "Quantidade de Atores";
        vetArquivo[1] = String.valueOf(natores_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Quantidade de Elementos";
        vetArquivo[1] = String.valueOf(nelementos_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Quantidade de Ligações";
        vetArquivo[1] = String.valueOf(nlinks_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Diagrama SD/SR";
        if (Controller.getOme().verificaSDSR(Controller.getatorSistema())) {
            vetArquivo[1] = "Diagrama de Razões Estratégicas (SR)";
        } else {
            vetArquivo[1] = "Diagrama de Dependências Estratégicas (SD)";
        }
        tabArquivo.addRow(vetArquivo);
        tabelaArquivo.setModel(tabArquivo);
        /*
         * Atualiza Atores i* Mapeados
         */
        DefaultTableModel tabAtores = new DefaultTableModel();
        String vetAtores[] = new String[4];
        tabAtores.addColumn("ID");
        tabAtores.addColumn("Código");
        tabAtores.addColumn("Nome");
        tabAtores.addColumn("Childrens");
        for (int i = 0; i < Controller.getOme().getActors().size(); i++) {
            vetAtores[0] = String.valueOf(i);
            vetAtores[1] = Controller.getOme().getActor(i).getCod();
            vetAtores[2] = Controller.getOme().getActor(i).getName();
            if (Controller.getOme().getActor(i).getChildren().size() > 0) {
                vetAtores[3] = "SIM";
            } else {
                vetAtores[3] = "NÃO";
            }
            tabAtores.addRow(vetAtores);
        }
        int atores = Controller.getOme().getActors().size();
        for (int i = 0; i < Controller.getOme().getAgents().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getAgent(i).getCod();
            vetAtores[2] = Controller.getOme().getAgent(i).getName();
            if (Controller.getOme().getAgent(i).getChildren().size() > 0) {
                vetAtores[3] = "SIM";
            } else {
                vetAtores[3] = "NÃO";
            }
            tabAtores.addRow(vetAtores);
        }
        atores += Controller.getOme().getAgents().size();
        for (int i = 0; i < Controller.getOme().getRoles().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getRole(i).getCod();
            vetAtores[2] = Controller.getOme().getRole(i).getName();
            if (Controller.getOme().getRole(i).getChildren().size() > 0) {
                vetAtores[3] = "SIM";
            } else {
                vetAtores[3] = "NÃO";
            }
            tabAtores.addRow(vetAtores);
        }
        atores += Controller.getOme().getRoles().size();
        for (int i = 0; i < Controller.getOme().getPositions().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getPosition(i).getCod();
            vetAtores[2] = Controller.getOme().getPosition(i).getName();
            if (Controller.getOme().getPosition(i).getChildren().size() > 0) {
                vetAtores[3] = "SIM";
            } else {
                vetAtores[3] = "NÃO";
            }
            tabAtores.addRow(vetAtores);
        }
        tabelaAtores.setModel(tabAtores);
        // Seta larguda das colunas
        tabelaAtores.getColumnModel().getColumn(0).setPreferredWidth(10);
        tabelaAtores.getColumnModel().getColumn(1).setPreferredWidth(50);
        tabelaAtores.getColumnModel().getColumn(2).setPreferredWidth(500);
        tabelaAtores.getColumnModel().getColumn(3).setPreferredWidth(50);
        /*
         * Atualiza Elementos i* Mapeados
         */
        DefaultTableModel tabElementos = new DefaultTableModel();
        String vetElementos[] = new String[4];
        tabElementos.addColumn("ID");
        tabElementos.addColumn("Código");
        tabElementos.addColumn("Nome");
        tabElementos.addColumn("Elemento Tipo");
        int cont = 0;
        ArrayList<IStarElement> goals = Controller.getOme().getGoals();
        vetElementos[3] = "Objetivo";
        for (int i = 0; i < goals.size(); i++) {
            vetElementos[0] = String.valueOf(cont);
            vetElementos[1] = goals.get(i).getCod();
            vetElementos[2] = goals.get(i).getName().substring(2, goals.get(i).getName().length() - 1);
            tabElementos.addRow(vetElementos);
            cont++;
        }
        ArrayList<IStarElement> tasks = Controller.getOme().getTasks();
        vetElementos[3] = "Tarefa";
        for (int i = 0; i < tasks.size(); i++) {
            vetElementos[0] = String.valueOf(cont);
            vetElementos[1] = tasks.get(i).getCod();
            vetElementos[2] = tasks.get(i).getName().substring(2, tasks.get(i).getName().length() - 1);
            tabElementos.addRow(vetElementos);
            cont++;
        }
        ArrayList<IStarElement> resources = Controller.getOme().getResources();
        vetElementos[3] = "Recurso";
        for (int i = 0; i < resources.size(); i++) {
            vetElementos[0] = String.valueOf(cont);
            vetElementos[1] = resources.get(i).getCod();
            vetElementos[2] = resources.get(i).getName().substring(2, resources.get(i).getName().length() - 1);
            tabElementos.addRow(vetElementos);
            cont++;
        }
        ArrayList<IStarElement> softgoals = Controller.getOme().getSoftgoals();
        vetElementos[3] = "ObjetivoSoft";
        for (int i = 0; i < softgoals.size(); i++) {
            vetElementos[0] = String.valueOf(cont);
            vetElementos[1] = softgoals.get(i).getCod();
            vetElementos[2] = softgoals.get(i).getName().substring(2, softgoals.get(i).getName().length() - 1);
            tabElementos.addRow(vetElementos);
            cont++;
        }
        tabelaElementos.setModel(tabElementos);
        // Seta larguda das colunas
        tabelaElementos.getColumnModel().getColumn(0).setPreferredWidth(10);
        tabelaElementos.getColumnModel().getColumn(1).setPreferredWidth(80);
        tabelaElementos.getColumnModel().getColumn(2).setPreferredWidth(500);
        tabelaElementos.getColumnModel().getColumn(3).setPreferredWidth(80);
        /*
         * Atualiza Links i* Mapeados
         */
        DefaultTableModel tabLinks = new DefaultTableModel();
        String vetLinks[] = new String[5];
        tabLinks.addColumn("ID");
        tabLinks.addColumn("Código");
        tabLinks.addColumn("From");
        tabLinks.addColumn("To");
        tabLinks.addColumn("Link Tipo");
        cont = 0;
        ArrayList<IStarLink> isas = Controller.getOme().getISA();
        vetLinks[4] = "ISA";
        for (int i = 0; i < isas.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = isas.get(i).getCod();
            vetLinks[2] = isas.get(i).getFrom();
            vetLinks[3] = isas.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> inss = Controller.getOme().getINS();
        vetLinks[4] = "INS";
        for (int i = 0; i < inss.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = inss.get(i).getCod();
            vetLinks[2] = inss.get(i).getFrom();
            vetLinks[3] = inss.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> ispartofs = Controller.getOme().getIsPartOf();
        vetLinks[4] = "Is-Part-Of";
        for (int i = 0; i < ispartofs.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = ispartofs.get(i).getCod();
            vetLinks[2] = ispartofs.get(i).getFrom();
            vetLinks[3] = ispartofs.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> occupiess = Controller.getOme().getOccupies();
        vetLinks[4] = "Occupies";
        for (int i = 0; i < occupiess.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = occupiess.get(i).getCod();
            vetLinks[2] = occupiess.get(i).getFrom();
            vetLinks[3] = occupiess.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> playss = Controller.getOme().getPlays();
        vetLinks[4] = "Plays";
        for (int i = 0; i < playss.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = playss.get(i).getCod();
            vetLinks[2] = playss.get(i).getFrom();
            vetLinks[3] = playss.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> coverss = Controller.getOme().getCovers();
        vetLinks[4] = "Covers";
        for (int i = 0; i < coverss.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = coverss.get(i).getCod();
            vetLinks[2] = coverss.get(i).getFrom();
            vetLinks[3] = coverss.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> contributions = Controller.getOme().getContribution();
        vetLinks[4] = "Contribution";
        for (int i = 0; i < contributions.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = contributions.get(i).getCod();
            vetLinks[2] = contributions.get(i).getFrom();
            vetLinks[3] = contributions.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> dependencias = Controller.getOme().getDependencies();
        vetLinks[4] = "Dependência";
        for (int i = 0; i < dependencias.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = dependencias.get(i).getCod();
            vetLinks[2] = dependencias.get(i).getFrom();
            vetLinks[3] = dependencias.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> decompositions = Controller.getOme().getDecompositions();
        vetLinks[4] = "Decomp. Tarefas";
        for (int i = 0; i < decompositions.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = decompositions.get(i).getCod();
            vetLinks[2] = decompositions.get(i).getFrom();
            vetLinks[3] = decompositions.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        ArrayList<IStarLink> meansEnds = Controller.getOme().getMeansEnds();
        vetLinks[4] = "Meio-Fim";
        for (int i = 0; i < meansEnds.size(); i++) {
            vetLinks[0] = String.valueOf(cont);
            vetLinks[1] = meansEnds.get(i).getCod();
            vetLinks[2] = meansEnds.get(i).getFrom();
            vetLinks[3] = meansEnds.get(i).getTo();
            tabLinks.addRow(vetLinks);
            cont++;
        }
        tabelaLinks.setModel(tabLinks);
        // Seta larguda das colunas
        tabelaLinks.getColumnModel().getColumn(0).setPreferredWidth(10);
        tabelaLinks.getColumnModel().getColumn(1).setPreferredWidth(100);
        tabelaLinks.getColumnModel().getColumn(2).setPreferredWidth(100);
        tabelaLinks.getColumnModel().getColumn(3).setPreferredWidth(100);
        tabelaLinks.getColumnModel().getColumn(4).setPreferredWidth(100);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirEditor;
    private javax.swing.JMenu MenuFerramentas;
    private javax.swing.JTabbedPane abasMenu;
    private javax.swing.JButton abrirArquivoTelosButton;
    private javax.swing.JMenuItem abrirArquivoTelosMenu;
    private javax.swing.JMenu ajuda;
    private javax.swing.JMenu arquivo;
    private javax.swing.JScrollPane atoresMapeados;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton diretrizesButton;
    private javax.swing.JMenuItem diretrizesMenu;
    private javax.swing.JScrollPane elementosMapeados;
    private javax.swing.JScrollPane informacoesArquivo;
    private javax.swing.JScrollPane linksMapeados;
    private javax.swing.JButton mapearCasosdeUsoButton;
    private javax.swing.JMenuItem sairMenu;
    private javax.swing.JMenuItem sobreMenu;
    private javax.swing.JTable tabelaArquivo;
    private javax.swing.JTable tabelaAtores;
    private javax.swing.JTable tabelaElementos;
    private javax.swing.JTable tabelaLinks;
    // End of variables declaration//GEN-END:variables
}
